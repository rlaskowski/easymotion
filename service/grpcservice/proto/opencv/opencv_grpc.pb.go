// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package opencv

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideoClient is the client API for Video service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoClient interface {
	Stream(ctx context.Context, in *VideoRequest, opts ...grpc.CallOption) (Video_StreamClient, error)
}

type videoClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoClient(cc grpc.ClientConnInterface) VideoClient {
	return &videoClient{cc}
}

func (c *videoClient) Stream(ctx context.Context, in *VideoRequest, opts ...grpc.CallOption) (Video_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Video_ServiceDesc.Streams[0], "/opencv.Video/stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &videoStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Video_StreamClient interface {
	Recv() (*VideoResponse, error)
	grpc.ClientStream
}

type videoStreamClient struct {
	grpc.ClientStream
}

func (x *videoStreamClient) Recv() (*VideoResponse, error) {
	m := new(VideoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VideoServer is the server API for Video service.
// All implementations must embed UnimplementedVideoServer
// for forward compatibility
type VideoServer interface {
	Stream(*VideoRequest, Video_StreamServer) error
	mustEmbedUnimplementedVideoServer()
}

// UnimplementedVideoServer must be embedded to have forward compatible implementations.
type UnimplementedVideoServer struct {
}

func (UnimplementedVideoServer) Stream(*VideoRequest, Video_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedVideoServer) mustEmbedUnimplementedVideoServer() {}

// UnsafeVideoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoServer will
// result in compilation errors.
type UnsafeVideoServer interface {
	mustEmbedUnimplementedVideoServer()
}

func RegisterVideoServer(s grpc.ServiceRegistrar, srv VideoServer) {
	s.RegisterService(&Video_ServiceDesc, srv)
}

func _Video_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VideoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VideoServer).Stream(m, &videoStreamServer{stream})
}

type Video_StreamServer interface {
	Send(*VideoResponse) error
	grpc.ServerStream
}

type videoStreamServer struct {
	grpc.ServerStream
}

func (x *videoStreamServer) Send(m *VideoResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Video_ServiceDesc is the grpc.ServiceDesc for Video service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Video_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opencv.Video",
	HandlerType: (*VideoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "stream",
			Handler:       _Video_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service/grpcservice/proto/opencv.proto",
}
